#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=3
xlog_level=3
log_stderror=yes
log_stdout=yes
log_facility=LOG_LOCAL0

udp_workers=4

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

dns=no

socket=udp:172.22.0.21:5060
socket=tcp:172.22.0.21:5060


#set module path
mpath="/lib64/opensips/modules/"

####### Modules Section ########

####### http module ######
loadmodule "httpd.so"

modparam("httpd", "ip", "0.0.0.0")
modparam("httpd", "port", 8080)


######  Prometheus module ###################
loadmodule "prometheus.so"
modparam("prometheus", "root", "metrics")
modparam("prometheus", "statistics", "all")




#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### NATHELPER module
loadmodule "nathelper.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/run/opensips/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### proto_udp module
loadmodule "dispatcher.so"

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "dialog.so"

#### dbtext module
loadmodule "/lib64/opensips/modules/db_text.so"
modparam("dispatcher", "db_url", "text:///etc/opensips/db")

#### aaa_diameter module
loadmodule "aaa_diameter.so"
modparam("aaa_diameter", "fd_log_level", 0) # max amount of logging, quite annoying
modparam("aaa_diameter", "realm", "ims.mnc001.mcc001.3gppnetwork.org")
modparam("aaa_diameter", "peer_identity", "hss")
modparam("aaa_diameter", "aaa_url",
	"diameter:/etc/opensips/freeDiameter.conf;extra-avps-file:/etc/opensips/pcscf.dictionary")





###### HEP Module ############
loadmodule "proto_hep.so"
modparam("proto_hep", "hep_id","[hep_dst] 192.168.88.243:9060; transport=udp; version=3")
socket=hep_udp:172.22.0.21:6080


##### TRACER Module ############
loadmodule "tracer.so"
modparam("tracer", "trace_on", 1)
modparam("tracer", "trace_id",
"[hep_tracer]uri=hep:hep_dst")




####### Routing Logic ########

# main request routing logic

route{
	trace("hep_tracer", "t", "sip|xlog");
	xlog("L_ERR", "[$ci] Start route time [$Tf] method ($rm) r-uri ($ru) \n");

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
			route(session_termination);
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if (is_method("REGISTER")) {
		# TODO IPSEC here
		
		xlog("L_ERR", "[$ci] Received REGISTER for $tu - relaying to I-CSCF\n");
		append_hf("Path: <sip:term@pcscf.ims.mnc001.mcc001.3gppnetwork.org;lr>\r\n");
		route(dm_send_aar, "control");

		# relay to I-CSCF
	    	$du = "sip:172.22.0.19:4060";

		t_on_reply("register_reply");
	 	route(relay);
		exit;
	} else if (is_method("INVITE")) {
		if (!loose_route()) {
			xlog("L_ERR", "[$ci] Received INVITE for $tu - but not for me - don't know how to relay\n");
			send_reply(502,"Bad Gateway");
			exit;
		}
		xlog("L_ERR", "[$ci] Received INVITE for $tu - relaying to S-CSCF ($ru/$du)\n");
		t_on_reply("invite_reply");
		route(extract_ip_port);
		$avp(si) = $si;
		$avp(ip) = $var(ip);
		$avp(port) = $var(port);
		$avp(rtcp) = $var(rtcp);
		fix_nated_contact();
		create_dialog();
		record_route();
		$avp(stream) = $(rb{sdp.stream,0});
		if (!t_relay()) {
			xlog("L_ERR", "[$ci] Cannot relay to $ru/$du\n");
			t_reply(503, "Internal Error");
			exit;
		}
		exit;
	}

	send_reply(503,"Not Implemented");
	exit;
}


route[relay] {
	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}

onreply_route[register_reply] {
	xlog("L_ERR","[$ci] Received REGISTER reply $rs from $si for $tu\n");
}

onreply_route[invite_reply] {

	if (!has_body_part("application/sdp")) {
		xlog("L_ERR","[$ci] Received INVITE reply $rs from $si for $tu - without SDP\n");
		return;
	} else if (isflagset("INVITE_AAA")) {
		xlog("L_ERR","[$ci] Received INVITE reply $rs from $si for $tu - AAA done\n");
		return;
	}
	xlog("L_ERR","[$ci] Received INVITE reply $rs from $si for $tu - doing AAR\n");
	route(extract_ip_port);
	route(dm_send_aar, "audio");
	setflag("INVITE_AAA");
}


route[dm_send_aar] {
	$var(session_id) = "pcscf.ims.mnc001.mcc001.3gppnetwork.org;"+$Ts+"."+$Tsm+";"+$pp;

	switch ($param(1)) {

	case "control":
		$var(media_component) = "[{\"Media-Component-Number\": 1},
			{\"Media-Sub-Component\": [{\"Flow-Number\": 1},
				{\"Flow-Description\": \"permit in ip from "+$si+" "+$sp+" to "+$socket_in(ip)+" "+$socket_in(port)+"\"},
				{\"Flow-Description\": \"permit out ip from "+$socket_in(ip)+" "+$socket_in(port)+" to "+$si+" "+$sp+"\"},
				{\"Flow-Usage\": 2}]},
			{\"Media-Type\": 4},
			{\"Codec-Data\": \"uplink\noffer\n\"},
			{\"Codec-Data\": \"downlink\nanswer\n\"},
			{\"Flow-Status\": 2}]";
		$avp(si) = $si;
		break;
	case "audio":
		$var(media_component) = "[{\"Media-Component-Number\": 1},
			{\"Media-Sub-Component\": [{\"Flow-Number\": 1},
				{\"Flow-Description\": \"permit in 17 from "+$avp(ip)+" "+$avp(port)+" to "+$var(ip)+" "+$var(port)+"\"},
				{\"Flow-Description\": \"permit out 17 from "+$var(ip)+" "+$var(port)+" to "+$avp(ip)+" "+$avp(port)+"\"},
				{\"Flow-Description\": \"permit in 17 from "+$avp(ip)+" "+$avp(rtcp)+" to "+$var(ip)+" "+$var(rtcp)+"\"},
				{\"Flow-Description\": \"permit out 17 from "+$var(ip)+" "+$var(rtcp)+" to "+$avp(ip)+" "+$avp(rtcp)+"\"},
				{\"Flow-Usage\": 0}]},
			{\"Media-Type\": 0},
			{\"Max-Requested-Bandwidth-DL\": 41000},
			{\"Max-Requested-Bandwidth-UL\": 64000},
			{\"Codec-Data\": \"uplink\noffer\n"+$avp(stream)+"\"},
			{\"Codec-Data\": \"downlink\nanswer\n"+$(rb{sdp.stream,0})+"\"},
			{\"Flow-Status\": 2}]";
		$dlg_val(session_id) = $var(session_id);
		break;
	}
	$var(payload) = "[
		{ \"Session-Id\": \""+$var(session_id)+"\" },
		{ \"Auth-Application-Id\": 16777236 },
		{ \"Origin-Host\": \"pcscf.ims.mnc001.mcc001.3gppnetwork.org\" },
		{ \"Origin-Realm\": \"ims.mnc001.mcc001.3gppnetwork.org\" },
		{ \"Destination-Realm\": \"epc.mnc001.mcc001.3gppnetwork.org\" },
		{ \"Vendor-Specific-Application-Id\": [{\"Vendor-Id\": 10415},
			{\"Auth-Application-Id\": 16777236}]},
		{ \"AF-Application-Identifier\": \"IMS Services\" },
		{ \"Authorization-Lifetime\": 3600 },
		{ \"Subscription-ID\": [{\"Subscription-Id-Type\": 2},
			{\"Subscription-Id-Data\": \""+$fu+"\"}]},
		{ \"Reservation-Priority\": 0 },
		{ \"Media-Component-Description\": "+$var(media_component)+"},
		{ \"Frame-IP-Address\": "+$(avp(si){ip.pton}{s.reverse}{s.cast.int})+" },
		{ \"Specific-Action\": 1 },
		{ \"Specific-Action\": 2 },
		{ \"Specific-Action\": 3 },
		{ \"Specific-Action\": 4 },
		{ \"Specific-Action\": 5 },
		{ \"Specific-Action\": 6 },
		{ \"Specific-Action\": 12 },
		{ \"Auth-Grace-Period\": 0 },
		{ \"Session-Timeout\": 3600 }
	]";

	$var(rc) = dm_send_request(16777236, 265, $var(payload), $var(rpl_avps));
	xlog("[$ci] AAA rc: $var(rc), AAA AVPs: $var(rpl_avps)\n");
}

route[session_termination] {

	xlog("L_ERR","[$ci] Received BYE from $si for $tu - doing STR\n");

	$var(payload) = "[
		{ \"Session-Id\": \""+$dlg_val(session_id)+"\" },
		{ \"Auth-Application-Id\": 16777236 },
		{ \"Origin-Host\": \"pcscf.ims.mnc001.mcc001.3gppnetwork.org\" },
		{ \"Origin-Realm\": \"ims.mnc001.mcc001.3gppnetwork.org\" },
		{ \"Destination-Realm\": \"epc.mnc001.mcc001.3gppnetwork.org\" },
		{ \"Vendor-Specific-Application-Id\": [{\"Vendor-Id\": 10415},
			{\"Auth-Application-Id\": 16777236}]},
		{ \"AF-Application-Identifier\": \"IMS Services\" },
		{ \"Termination-Cause\": 1 }
	]";

	$var(rc) = dm_send_request(16777236, 275, $var(payload), $var(rpl_avps));
	xlog("[$ci] STA rc: $var(rc), STA AVPs: $var(rpl_avps)\n");
}

route[extract_ip_port] {
	$var(ip) = $(rb{sdp.line,c}{s.select,2, });
	$var(port) = $(rb{sdp.line,m}{s.select,1, });
	$var(rtcp) = $(var(port){s.int}) + 1;
}
